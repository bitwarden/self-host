name: Release
run-name: Release ${{ inputs.release_type }} v${{ inputs.release_version }}

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: "Release Version (example: '2025.2.1')"
        required: true
      release_type:
        description: "Release Options"
        required: true
        default: "Release"
        type: choice
        options:
          - Release
          - Dry Run

env:
  _AZ_REGISTRY: bitwardenprod.azurecr.io

permissions:
  contents: read

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-24.04
    permissions:
      contents: read
    outputs:
      _WEB_RELEASE_TAG: ${{ steps.set-tags.outputs.WEB_RELEASE_TAG }}
      _CORE_RELEASE_TAG: ${{ steps.set-tags.outputs.CORE_RELEASE_TAG }}
      _KEY_CONNECTOR_RELEASE_TAG: ${{ steps.set-tags.outputs.KEY_CONNECTOR_RELEASE_TAG }}
      _LATEST_SELF_HOST_VERSION: ${{ steps.get-self-host.outputs.version }}
    steps:
      - name: Branch check
        if: ${{ inputs.release_type != 'Dry Run' }}
        run: |
          if [[ "$GITHUB_REF" != "refs/heads/main" ]]; then
            echo "==================================="
            echo "[!] Can only release from the 'main' branch"
            echo "==================================="
            exit 1
          fi

      - name: Checkout repo
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Get Latest Self-Host Version
        id: get-self-host
        uses: bitwarden/gh-actions/get-release-version@main
        with:
          repository: bitwarden/self-host

      - name: Check Release Version
        env:
          RELEASE_VERSION: ${{ inputs.release_version }}
          PREVIOUS_RELEASE_VERSION: ${{ steps.get-self-host.outputs.version }}
        run: |
          if [ "$RELEASE_VERSION" == "$PREVIOUS_RELEASE_VERSION" ]; then
            echo "[!] Already released v$RELEASE_VERSION. Please bump version to continue"
            exit 1
          fi

      - name: Set Release Tags
        id: set-tags
        run: |
          WEB=$(jq -r '.versions.webVersion' < version.json)
          CORE=$(jq -r '.versions.coreVersion' < version.json)
          KEY_CONNECTOR=$(jq -r '.versions.keyConnectorVersion' < version.json)

          {
            echo "WEB_RELEASE_TAG=$WEB"
            echo "CORE_RELEASE_TAG=$CORE"
            echo "KEY_CONNECTOR_RELEASE_TAG=$KEY_CONNECTOR"
          } >> "$GITHUB_OUTPUT"

  release:
    name: Create GitHub Release
    runs-on: ubuntu-24.04
    needs: setup
    permissions:
      contents: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Get projects that changed versions
        id: changed-projects
        env:
          _LATEST_SELF_HOST_VERSION: ${{ needs.setup.outputs._LATEST_SELF_HOST_VERSION }}
        run: |
          git diff --unified=0 "$_LATEST_SELF_HOST_VERSION" "$GITHUB_REF_NAME" -- version.json >> diff.txt

          if grep -q "webVersion" diff.txt; then
            echo "WEB_VERSION_CHANGED=true" >> "$GITHUB_OUTPUT"
          fi

          if grep -q "coreVersion" diff.txt; then
            echo "CORE_VERSION_CHANGED=true" >> "$GITHUB_OUTPUT"
          fi

          if grep -q "keyConnectorVersion" diff.txt; then
            echo "KEY_CONNECTOR_VERSION_CHANGED=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Prepare release notes
        id: prepare-release-notes
        env:
          CORE_VERSION_CHANGED: ${{ steps.changed-projects.outputs.CORE_VERSION_CHANGED }}
          CORE_RELEASE_TAG: ${{ needs.setup.outputs._CORE_RELEASE_TAG }}
          WEB_VERSION_CHANGED: ${{ steps.changed-projects.outputs.WEB_VERSION_CHANGED }}
          WEB_RELEASE_TAG: ${{ needs.setup.outputs._WEB_RELEASE_TAG }}
          KEY_CONNECTOR_VERSION_CHANGED: ${{ steps.changed-projects.outputs.KEY_CONNECTOR_VERSION_CHANGED }}
          KEY_CONNECTOR_RELEASE_TAG: ${{ needs.setup.outputs._KEY_CONNECTOR_RELEASE_TAG }}

        run: |
          RELEASE_NOTES=""

          if [ -n "${CORE_VERSION_CHANGED}" ]; then
            RELEASE_NOTES+="Update Core version to [v${CORE_RELEASE_TAG}](https://github.com/bitwarden/server/releases/tag/v${CORE_RELEASE_TAG})"
          fi

          if [ -n "${WEB_VERSION_CHANGED}" ]; then
            if [ -n "$RELEASE_NOTES" ]; then
              RELEASE_NOTES+=$'\n'
            fi
            RELEASE_NOTES+="Update Web version to [v${WEB_RELEASE_TAG}](https://github.com/bitwarden/clients/releases/tag/web-v${WEB_RELEASE_TAG})"
          fi

          if [ -n "${KEY_CONNECTOR_VERSION_CHANGED}" ]; then
            if [ -n "$RELEASE_NOTES" ]; then
              RELEASE_NOTES+=$'\n'
            fi
            RELEASE_NOTES+="Update Key Connector version to [v${KEY_CONNECTOR_RELEASE_TAG}](https://github.com/bitwarden/key-connector/releases/tag/v${KEY_CONNECTOR_RELEASE_TAG})"
          fi

          (
            echo 'RELEASE_NOTES<<EOF'
            echo "$RELEASE_NOTES"
            echo EOF
          ) >> "$GITHUB_OUTPUT"

      - name: Create release
        if: ${{ inputs.release_type != 'Dry Run' }}
        uses: ncipollo/release-action@bcfe5470707e8832e12347755757cec0eb3c22af # v1.18.0
        with:
          artifacts: 'bitwarden.sh,
                      run.sh,
                      bitwarden.ps1,
                      run.ps1,
                      version.json'
          commit: ${{ github.sha }}
          tag: "v${{ inputs.release_version }}"
          name: "Version ${{ inputs.release_version }}"
          body: ${{ steps.prepare-release-notes.outputs.RELEASE_NOTES }}
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false


  release-s3:
    name: Upload version.json
    runs-on: ubuntu-24.04
    needs:
      - setup
      - release
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: main
          persist-credentials: false

      - name: Log in to Azure
        uses: bitwarden/gh-actions/azure-login@main
        with:
          subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          client_id: ${{ secrets.AZURE_CLIENT_ID }}

      - name: Retrieve secrets
        id: retrieve-secrets
        uses: bitwarden/gh-actions/get-keyvault-secrets@main
        with:
          keyvault: "bitwarden-ci"
          secrets: "aws-selfhost-version-access-id,
            aws-selfhost-version-access-key,
            aws-selfhost-version-bucket-name"

      - name: Log out from Azure
        uses: bitwarden/gh-actions/azure-logout@main

      - name: Upload version.json to S3 bucket
        if: ${{ inputs.release_type != 'Dry Run' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.retrieve-secrets.outputs.aws-selfhost-version-access-id }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.retrieve-secrets.outputs.aws-selfhost-version-access-key }}
          AWS_DEFAULT_REGION: 'us-east-1'
          AWS_S3_BUCKET_NAME: ${{ steps.retrieve-secrets.outputs.aws-selfhost-version-bucket-name }}
        run: |
          aws s3 cp version.json "$AWS_S3_BUCKET_NAME" \
          --acl "public-read" \
          --quiet


  tag-push-latest-images:
    name: Tag and push ${{ matrix.project_name }} image with release version and latest
    runs-on: ubuntu-24.04
    needs:
      - setup
      - release
    env:
      _CORE_RELEASE_TAG: ${{ needs.setup.outputs._CORE_RELEASE_TAG }}
      _BRANCH_NAME: main
    permissions:
      id-token: write
      packages: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - project_name: Admin
          - project_name: Api
          - project_name: Attachments
          - project_name: Events
          - project_name: Icons
          - project_name: Identity
          - project_name: MsSql
          - project_name: MsSqlMigratorUtility
          - project_name: Nginx
          - project_name: Notifications
          - project_name: Scim
          - project_name: Server
          - project_name: Setup
          - project_name: Sso
          - project_name: Web
            release_tag: ${{ needs.setup.outputs._WEB_RELEASE_TAG }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: main
          persist-credentials: false

      - name: Install Cosign
        uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 # v3.9.2

      - name: Log in to Azure
        uses: bitwarden/gh-actions/azure-login@main
        with:
          subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          client_id: ${{ secrets.AZURE_CLIENT_ID }}

      - name: Setup project name and release tag
        id: setup
        env:
          MATRIX_RELEASE_TAG: ${{ matrix.release_tag }}
        run: |
          PROJECT_NAME=$(echo "${{ matrix.project_name }}" | awk '{print tolower($0)}')
          echo "Matrix name: ${{ matrix.project_name }}"
          echo "PROJECT_NAME: $PROJECT_NAME"
          echo "_PROJECT_NAME=$PROJECT_NAME" >> "$GITHUB_ENV"

          if [ -z "${MATRIX_RELEASE_TAG}" ]; then
            # Use core release tag by default.
            echo "_RELEASE_TAG=$_CORE_RELEASE_TAG" >> "$GITHUB_ENV"
          else
            echo "_RELEASE_TAG=${MATRIX_RELEASE_TAG}" >> "$GITHUB_ENV"
          fi

      ### ghcr.io section
      - name: Login to GitHub Container Registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push version and latest image
        if: ${{ inputs.release_type != 'Dry Run' }}
        run: |
          skopeo --version
          skopeo login "$_AZ_REGISTRY" -u 00000000-0000-0000-0000-000000000000 -p "$(az acr login --expose-token --name "${_AZ_REGISTRY%.azurecr.io}" | jq -r .accessToken)"
          skopeo copy --all "docker://$_AZ_REGISTRY/$_PROJECT_NAME:$_RELEASE_TAG" "docker://ghcr.io/bitwarden/$_PROJECT_NAME:$_RELEASE_TAG"
          skopeo copy --all "docker://$_AZ_REGISTRY/$_PROJECT_NAME:latest" "docker://ghcr.io/bitwarden/$_PROJECT_NAME:latest"

      - name: Sign image with Cosign
        run: |
          cosign sign --yes "ghcr.io/bitwarden/$_PROJECT_NAME:$_RELEASE_TAG"
          cosign sign --yes "ghcr.io/bitwarden/$_PROJECT_NAME:latest"

      - name: Verify the signed image with Cosign
        run: |
          cosign verify \
            --certificate-identity "${GITHUB_SERVER_URL}/${GITHUB_WORKFLOW_REF}" \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            "ghcr.io/bitwarden/$_PROJECT_NAME:$_RELEASE_TAG"

          cosign verify \
            --certificate-identity "${GITHUB_SERVER_URL}/${GITHUB_WORKFLOW_REF}" \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            "ghcr.io/bitwarden/$_PROJECT_NAME:latest"

      - name: Log out of Docker
        run: |
          docker logout ghcr.io
          docker logout "$_AZ_REGISTRY"

      - name: Log out from Azure
        uses: bitwarden/gh-actions/azure-logout@main


  release-unified:
    name: Release Self-host unified
    runs-on: ubuntu-24.04
    needs:
      - setup
      - release
    env:
      _RELEASE_VERSION: ${{ inputs.release_version }}-beta # TODO: remove `-beta` after GA
    permissions:
      id-token: write
      packages: write
    steps:
      - name: Log in to Azure
        uses: bitwarden/gh-actions/azure-login@main
        with:
          subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          client_id: ${{ secrets.AZURE_CLIENT_ID }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Cosign
        uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 # v3.9.2

      - name: Push version and latest image
        if: ${{ inputs.release_type != 'Dry Run' }}
        run: |
          skopeo --version
          skopeo login "$_AZ_REGISTRY" -u 00000000-0000-0000-0000-000000000000 -p "$(az acr login --expose-token --name "${_AZ_REGISTRY%.azurecr.io}" | jq -r .accessToken)"
          skopeo copy --all "docker://$_AZ_REGISTRY/self-host:beta" "docker://ghcr.io/bitwarden/self-host:$_RELEASE_VERSION"
          skopeo copy --all "docker://$_AZ_REGISTRY/self-host:beta" "docker://ghcr.io/bitwarden/self-host:beta" # TODO: Delete after GA
          # skopeo copy --all "docker://$_AZ_REGISTRY/self-host:beta" "docker://ghcr.io/bitwarden/self-host:latest" # TODO: uncomment after GA

      - name: Sign image with Cosign
        run: |
          cosign sign --yes "ghcr.io/bitwarden/self-host:$_RELEASE_VERSION"
          cosign sign --yes "ghcr.io/bitwarden/self-host:latest"

      - name: Verify the signed image with Cosign
        run: |
          cosign verify \
            --certificate-identity "${GITHUB_SERVER_URL}/${GITHUB_WORKFLOW_REF}" \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            "ghcr.io/bitwarden/self-host:$_RELEASE_VERSION"

          cosign verify \
            --certificate-identity "${GITHUB_SERVER_URL}/${GITHUB_WORKFLOW_REF}" \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            "ghcr.io/bitwarden/self-host:latest"

      - name: Log out of skopeo and ghcr.io
        run: |
          skopeo logout --all
          docker logout ghcr.io

      ########## ACR PROD ##########
      - name: Login to Azure ACR
        run: az acr login -n "${_AZ_REGISTRY%.azurecr.io}"

      - name: Pull latest project image
        run: |
          if [[ "${{ inputs.release_type }}" == "Dry Run" ]]; then
            docker pull "$_AZ_REGISTRY/self-host:dev"
          else
            docker pull "$_AZ_REGISTRY/self-host:beta"
          fi

      - name: Tag version and latest
        run: |
          if [[ "${{ inputs.release_type }}" == "Dry Run" ]]; then
            docker tag "$_AZ_REGISTRY/self-host:dev" "$_AZ_REGISTRY/self-host:dryrun"
          else
            docker tag "$_AZ_REGISTRY/self-host:beta" "$_AZ_REGISTRY/self-host:$_RELEASE_VERSION"
            docker tag "$_AZ_REGISTRY/self-host:beta" "$_AZ_REGISTRY/self-host:latest"
          fi

      - name: Push version and latest image
        if: ${{ inputs.release_type != 'Dry Run' }}
        run: |
          docker push "$_AZ_REGISTRY/self-host:$_RELEASE_VERSION"
          docker push "$_AZ_REGISTRY/self-host:latest"

      - name: Log out of Docker
        run: docker logout "$_AZ_REGISTRY"

      - name: Log out from Azure
        uses: bitwarden/gh-actions/azure-logout@main


  trigger-workflows:
    name: Trigger workflows
    runs-on: ubuntu-24.04
    needs:
      - setup
      - release
      - tag-push-latest-images
      - release-unified
    permissions:
      id-token: write
    steps:
      - name: Log in to Azure
        uses: bitwarden/gh-actions/azure-login@main
        with:
          subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          client_id: ${{ secrets.AZURE_CLIENT_ID }}

      - name: Get Azure Key Vault secrets
        id: get-kv-secrets
        uses: bitwarden/gh-actions/get-keyvault-secrets@main
        with:
          keyvault: gh-org-bitwarden
          secrets: "BW-GHAPP-ID,BW-GHAPP-KEY"

      - name: Log out from Azure
        uses: bitwarden/gh-actions/azure-logout@main

      - name: Generate GH App token
        uses: actions/create-github-app-token@0f859bf9e69e887678d5bbfbee594437cb440ffe # v2.1.0
        id: app-token
        with:
          app-id: ${{ steps.get-kv-secrets.outputs.BW-GHAPP-ID }}
          private-key: ${{ steps.get-kv-secrets.outputs.BW-GHAPP-KEY }}

      - name: Trigger release-digital-ocean workflow
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: 'bitwarden',
              repo: 'self-host',
              workflow_id: 'release-digital-ocean.yml',
              ref: 'main',
              inputs: {}
            });
