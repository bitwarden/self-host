name: Build Self-Host Unified

on:
  push:
    paths:
      - "docker-unified/**"
      - ".github/workflows/build-unified.yml"
  workflow_dispatch:
    inputs:
      server_branch:
        description: "Server branch name to deploy (examples: 'main', 'rc', 'feature/sm')"
        type: string
        default: main
      use_latest_core_version:
        description: "Use the latest core version from versions.json instead of branch"
        type: boolean
        default: false
  pull_request:
    paths:
      - ".github/workflows/build-unified.yml"
      - "docker-unified/**"

env:
  _AZ_REGISTRY: bitwardenprod.azurecr.io

jobs:
  build-docker:
    name: Build Docker image
    runs-on: ubuntu-24.04
    permissions:
      id-token: write
      packages: write
      security-events: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Get server branch to checkout
        id: server-branch-name
        env:
          SERVER_BRANCH: ${{ inputs.server_branch }}
        run: |
          if [[ "${{ inputs.use_latest_core_version }}" == "true" ]]; then
            # Extract coreVersion from versions.json
            CORE_VERSION=$(jq -r '.versions.coreVersion' versions.json)
            echo "Server version from versions.json: $CORE_VERSION"
            echo "server_ref=refs/tags/v$CORE_VERSION" >> $GITHUB_OUTPUT
            echo "ref_type=tag" >> $GITHUB_OUTPUT
          elif [[ -z "${SERVER_BRANCH}" ]]; then
            echo "server_ref=main" >> $GITHUB_OUTPUT
            echo "ref_type=branch" >> $GITHUB_OUTPUT
          else
            echo "server_ref=${SERVER_BRANCH#refs/heads/}" >> $GITHUB_OUTPUT
            echo "ref_type=branch" >> $GITHUB_OUTPUT
          fi

      - name: Check Branch to Publish
        env:
          PUBLISH_BRANCHES: "main,rc,hotfix-rc"
          SERVER_BRANCH: ${{ steps.server-branch-name.outputs.server_ref }}
          REF_TYPE: ${{ steps.server-branch-name.outputs.ref_type }}
        id: publish-branch-check
        run: |
          REF=${GITHUB_REF#refs/heads/}

          IFS="," read -a publish_branches <<< $PUBLISH_BRANCHES

          if [[ "${REF_TYPE}" == "tag" ]]; then
            # If the build is triggered by a tag, always publish
            echo "is_publish_branch=true" >> $GITHUB_ENV
          elif [[ "${publish_branches[*]}" =~ "${REF}" && "${publish_branches[*]}" =~ "${SERVER_BRANCH}" ]]; then
            echo "is_publish_branch=true" >> $GITHUB_ENV
          else
            echo "is_publish_branch=false" >> $GITHUB_ENV
          fi

      ########## Set up Docker ##########
      - name: Set up QEMU emulators
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0

      ########## Login to Docker registries ##########
      - name: Login to Azure - Prod Subscription
        uses: Azure/login@e15b166166a8746d1a47596803bd8c1b595455cf # v1.6.0
        with:
          creds: ${{ secrets.AZURE_PROD_KV_CREDENTIALS }}

      - name: Login to Azure ACR
        run: az acr login -n bitwardenprod

      - name: Login to GitHub Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      ########## Generate image tag and build Docker image ##########
      - name: Generate Docker image tag
        id: tag
        env:
          SERVER_BRANCH: ${{ steps.server-branch-name.outputs.server_ref }}
          REF_TYPE: ${{ steps.server-branch-name.outputs.ref_type }}
        run: |
          if [[ "${REF_TYPE}" == "tag" ]]; then
            # When using a tag (core version), always use beta tag
            IMAGE_TAG=beta
            echo "Using beta tag for core version release"
          else
            # For branch-based builds, use the logic
            IMAGE_TAG=$(echo "${SERVER_BRANCH}" | sed "s#/#-#g")  # slash safe branch name
            if [[ "${IMAGE_TAG}" == "main" ]]; then
              IMAGE_TAG=dev
            elif [[ ("${IMAGE_TAG}" == "rc") || ("${IMAGE_TAG}" == "hotfix-rc") ]]; then
              IMAGE_TAG=beta
            fi
          fi

          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT

      - name: Generate tag list
        id: tag-list
        env:
          IMAGE_TAG: ${{ steps.tag.outputs.image_tag }}
          IS_PUBLISH_BRANCH: ${{ env.is_publish_branch }}
        run: |
          if [[ ("${IMAGE_TAG}" == "dev" || "${IMAGE_TAG}" == "beta") && "${IS_PUBLISH_BRANCH}" == "true" ]]; then
            echo "tags=$_AZ_REGISTRY/self-host:${IMAGE_TAG},ghcr.io/bitwarden/self-host:${IMAGE_TAG}" >> $GITHUB_OUTPUT
          else
            echo "tags=$_AZ_REGISTRY/self-host:${IMAGE_TAG}" >> $GITHUB_OUTPUT
          fi

      - name: Generate GH App token
        uses: actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e # v2.0.6
        id: app-token
        with:
          app-id: ${{ secrets.BW_GHAPP_ID }}
          private-key: ${{ secrets.BW_GHAPP_KEY }}

      - name: Checkout server repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: bitwarden/server
          token: ${{ steps.app-token.outputs.token }}
          ref: ${{ steps.server-branch-name.outputs.server_ref }}
          path: "server"

      - name: Build and push Docker image
        id: build-docker
        uses: docker/build-push-action@14487ce63c7a62a4a324b0bfb37086795e31c6c1 # v6.16.0
        with:
          context: .
          file: docker-unified/Dockerfile
          platforms: |
            linux/amd64,
            linux/arm/v7,
            linux/arm64/v8
          push: true
          tags: ${{ steps.tag-list.outputs.tags }}

      - name: Install Cosign
        if: env.is_publish_branch == 'true'
        uses: sigstore/cosign-installer@3454372f43399081ed03b604cb2d021dabca52bb # v3.8.2

      - name: Sign image with Cosign
        if: env.is_publish_branch == 'true'
        id: sign
        env:
          DIGEST: ${{ steps.build-docker.outputs.digest }}
          TAGS: ${{ steps.tag-list.outputs.tags }}
        run: |
          IFS="," read -a tags <<< "${TAGS}"
          images=""
          for tag in "${tags[@]}"; do
            images+="${tag}@${DIGEST} "
          done
          cosign sign --yes ${images}
          echo "images=${images}" >> $GITHUB_OUTPUT

      - name: Verify the signed image(s) with Cosign
        if: env.is_publish_branch == 'true'
        run: |
          cosign verify \
            --certificate-identity "${{ github.server_url }}/${{ github.workflow_ref }}" \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            ${{ steps.sign.outputs.images }}

      - name: Scan Docker image
        id: container-scan
        uses: anchore/scan-action@869c549e657a088dc0441b08ce4fc0ecdac2bb65 # v5.3.0
        with:
          image: ${{ steps.tag-list.outputs.primary_tag }}
          fail-build: false
          output-format: sarif

      - name: Upload Grype results to GitHub
        uses: github/codeql-action/upload-sarif@60168efe1c415ce0f5521ea06d5c2062adbeed1b # v3.28.17
        with:
          sarif_file: ${{ steps.container-scan.outputs.sarif }}
          sha: ${{ contains(github.event_name, 'pull_request') && github.event.pull_request.head.sha || github.sha }}
          ref: ${{ contains(github.event_name, 'pull_request') && format('refs/pull/{0}/head', github.event.pull_request.number) || github.ref }}

      - name: Log out of Docker
        if: ${{ env.is_publish_branch == 'true' }}
        run: |
          docker logout ghcr.io
          docker logout $_AZ_REGISTRY


  check-failures:
    name: Check for failures
    if: always()
    runs-on: ubuntu-24.04
    needs: build-docker
    steps:
      - name: Check if any job failed
        if: |
          (github.ref == 'refs/heads/main'
          || github.ref == 'refs/heads/rc'
          || github.ref == 'refs/heads/hotfix-rc')
          && contains(needs.*.result, 'failure')
        run: exit 1

      - name: Login to Azure - CI subscription
        uses: Azure/login@e15b166166a8746d1a47596803bd8c1b595455cf # v1.6.0
        if: failure()
        with:
          creds: ${{ secrets.AZURE_KV_CI_SERVICE_PRINCIPAL }}

      - name: Retrieve secrets
        id: retrieve-secrets
        uses: bitwarden/gh-actions/get-keyvault-secrets@main
        if: failure()
        with:
          keyvault: "bitwarden-ci"
          secrets: "devops-alerts-slack-webhook-url"

      - name: Notify Slack on failure
        uses: act10ns/slack@44541246747a30eb3102d87f7a4cc5471b0ffb7d # v2.1.0
        if: failure()
        env:
          SLACK_WEBHOOK_URL: ${{ steps.retrieve-secrets.outputs.devops-alerts-slack-webhook-url }}
        with:
          status: ${{ job.status }}
